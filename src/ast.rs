use crate::lisp::Expression;
pub fn load_ast() -> Expression {
    Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("push!".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("q".to_string()), Expression::Word("item".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("set!".to_string()), Expression::Word("q".to_string()), Expression::Apply(vec![Expression::Word("length".to_string()), Expression::Word("q".to_string())]), Expression::Word("item".to_string())]), Expression::Word("item".to_string())])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("for".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("xs".to_string()), Expression::Word("cb".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("array".to_string())])]), Expression::Apply(vec![Expression::Word("loop".to_string()), Expression::Atom(0), Expression::Apply(vec![Expression::Word("length".to_string()), Expression::Word("xs".to_string())]), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("i".to_string()), Expression::Apply(vec![Expression::Word("push!".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("cb".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("xs".to_string()), Expression::Word("i".to_string())])])])])]), Expression::Word("out".to_string())])])]), Expression::Apply(vec![Expression::Word("for".to_string()), Expression::Apply(vec![Expression::Word("array".to_string()), Expression::Atom(1), Expression::Atom(2), Expression::Atom(3), Expression::Atom(4)]), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("x".to_string()), Expression::Apply(vec![Expression::Word("*".to_string()), Expression::Word("x".to_string()), Expression::Word("x".to_string())])])])])
}
