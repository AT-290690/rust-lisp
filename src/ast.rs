use crate::lisp::Expression;
pub fn load_ast() -> Expression {
    Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("summation".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("xs".to_string()), Expression::Apply(vec![Expression::Word("reduce".to_string()), Expression::Word("xs".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("a".to_string()), Expression::Word("b".to_string()), Expression::Apply(vec![Expression::Word("+".to_string()), Expression::Word("a".to_string()), Expression::Word("b".to_string())])]), Expression::Atom(0)])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("odd?".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("x".to_string()), Expression::Apply(vec![Expression::Word("not".to_string()), Expression::Apply(vec![Expression::Word("=".to_string()), Expression::Apply(vec![Expression::Word("mod".to_string()), Expression::Word("x".to_string()), Expression::Atom(2)]), Expression::Atom(0)])])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("filter".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("xs".to_string()), Expression::Word("cb?".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("array".to_string())])]), Expression::Apply(vec![Expression::Word("for".to_string()), Expression::Word("xs".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("x".to_string()), Expression::Apply(vec![Expression::Word("if".to_string()), Expression::Apply(vec![Expression::Word("cb?".to_string()), Expression::Word("x".to_string())]), Expression::Apply(vec![Expression::Word("push!".to_string()), Expression::Word("out".to_string()), Expression::Word("x".to_string())]), Expression::Atom(0)])])]), Expression::Word("out".to_string())])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("for".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("xs".to_string()), Expression::Word("cb".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("i".to_string()), Expression::Apply(vec![Expression::Word("array".to_string()), Expression::Atom(0)])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("len".to_string()), Expression::Apply(vec![Expression::Word("length".to_string()), Expression::Word("xs".to_string())])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("process".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("cb".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("xs".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)])])]), Expression::Apply(vec![Expression::Word("set!".to_string()), Expression::Word("i".to_string()), Expression::Atom(0), Expression::Apply(vec![Expression::Word("+".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)]), Expression::Atom(1)])])])])]), Expression::Apply(vec![Expression::Word("loop".to_string()), Expression::Apply(vec![Expression::Word("<".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)]), Expression::Word("len".to_string())]), Expression::Apply(vec![Expression::Word("process".to_string())])]), Expression::Word("xs".to_string())])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("range".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("start".to_string()), Expression::Word("end".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("array".to_string())])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("i".to_string()), Expression::Apply(vec![Expression::Word("array".to_string()), Expression::Word("start".to_string())])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("process".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("push!".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)])]), Expression::Apply(vec![Expression::Word("set!".to_string()), Expression::Word("i".to_string()), Expression::Atom(0), Expression::Apply(vec![Expression::Word("+".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)]), Expression::Atom(1)])])])])]), Expression::Apply(vec![Expression::Word("loop".to_string()), Expression::Apply(vec![Expression::Word("<=".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("i".to_string()), Expression::Atom(0)]), Expression::Word("end".to_string())]), Expression::Apply(vec![Expression::Word("process".to_string())])]), Expression::Word("out".to_string())])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("reduce".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("xs".to_string()), Expression::Word("cb".to_string()), Expression::Word("initial".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("out".to_string()), Expression::Apply(vec![Expression::Word("array".to_string()), Expression::Word("initial".to_string())])]), Expression::Apply(vec![Expression::Word("for".to_string()), Expression::Word("xs".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("x".to_string()), Expression::Apply(vec![Expression::Word("set!".to_string()), Expression::Word("out".to_string()), Expression::Atom(0), Expression::Apply(vec![Expression::Word("cb".to_string()), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("out".to_string()), Expression::Atom(0)]), Expression::Word("x".to_string())])])])]), Expression::Apply(vec![Expression::Word("get".to_string()), Expression::Word("out".to_string()), Expression::Atom(0)])])])]), Expression::Apply(vec![Expression::Word("let".to_string()), Expression::Word("push!".to_string()), Expression::Apply(vec![Expression::Word("lambda".to_string()), Expression::Word("q".to_string()), Expression::Word("item".to_string()), Expression::Apply(vec![Expression::Word("do".to_string()), Expression::Apply(vec![Expression::Word("set!".to_string()), Expression::Word("q".to_string()), Expression::Apply(vec![Expression::Word("length".to_string()), Expression::Word("q".to_string())]), Expression::Word("item".to_string())]), Expression::Word("item".to_string())])])]), Expression::Apply(vec![Expression::Word("summation".to_string()), Expression::Apply(vec![Expression::Word("filter".to_string()), Expression::Apply(vec![Expression::Word("range".to_string()), Expression::Atom(1), Expression::Atom(100)]), Expression::Word("odd?".to_string())])])])
}
